intialize array:
    fill(vec, vec+n, INT_MAX);


Intialize vector:
    1d vector : vector<int> vec(10,5)                       {vector of size of 10 with all values 5}
    2d vector : vector<vector<int>> vec(10, vector<int>())  {rows will 10 nothing about columns}
                vector<vector<int>> vec(10, vector<int>(15,-1))
                {row 10 columns 15 all values -1}


Iterator:

	vactor<int>::iterator it;
	it = vec.begin();  	//it's pointer so use with -> in map
	
	to move it to 6th element
	advance(it, 5);

Sorting:
	
	sort(vec.begin(), vec.end());
	sort(vec.begin(), vec.end(), greater<int>());
	descending by your own->
		
		This function basically means should first value go before second value?
		
		bool sortby(const int a, const int b){
			return (a>b);		
		}	
		Other way is:
		struct SortBy{
			//option 1
			bool operator() (int a, int b){
				return (a>b);
			}
			//option 2
			inline bool operator() (const int a, const int b){
				return (a>b);
			}
		} sortby;


IMPORTANT TO KNOW:
	priority_queue<int, vector<int>, SortBy> pq; 	// it expects class or structure (More common in JAVA)
	sort(vec.begin(), vec.end(), sortby);	// it expects function OR object of that structure or class

	sort takes function as third argument, while pq takes class as an argument.


Priority Queue:
	priority_queue<int> pq;					//max
	priority_queue<int, vector<int>, greater<int>> pq; 	//min queue
	
	last argument is compare class
	you can pass you own by making just like in sorting above.
	
	generally pq will be 		--> 10 20 20 30 (Max Heap).  30 being the top!
	'greater<int>' will make vector --> 30 20 20 10, so it will become Min Heap! (10 on top)
	



